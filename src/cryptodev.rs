/* automatically generated by rust-bindgen */

pub const __BITS_PER_LONG: u32 = 64;
pub const __FD_SETSIZE: u32 = 1024;
pub const LINUX_VERSION_CODE: u32 = 264658;
pub const CRYPTO_HMAC_MAX_KEY_LEN: u32 = 512;
pub const CRYPTO_CIPHER_MAX_KEY_LEN: u32 = 64;
pub const DES_BLOCK_LEN: u32 = 8;
pub const DES3_BLOCK_LEN: u32 = 8;
pub const RIJNDAEL128_BLOCK_LEN: u32 = 16;
pub const AES_BLOCK_LEN: u32 = 16;
pub const CAMELLIA_BLOCK_LEN: u32 = 16;
pub const BLOWFISH_BLOCK_LEN: u32 = 8;
pub const SKIPJACK_BLOCK_LEN: u32 = 8;
pub const CAST128_BLOCK_LEN: u32 = 8;
pub const EALG_MAX_BLOCK_LEN: u32 = 16;
pub const AALG_MAX_RESULT_LEN: u32 = 64;
pub const CRYPTODEV_MAX_ALG_NAME: u32 = 64;
pub const HASH_MAX_LEN: u32 = 64;
pub const SIOP_FLAG_KERNEL_DRIVER_ONLY: u32 = 1;
pub const COP_ENCRYPT: u32 = 0;
pub const COP_DECRYPT: u32 = 1;
pub const COP_FLAG_NONE: u32 = 0;
pub const COP_FLAG_UPDATE: u32 = 1;
pub const COP_FLAG_FINAL: u32 = 2;
pub const COP_FLAG_WRITE_IV: u32 = 4;
pub const COP_FLAG_NO_ZC: u32 = 8;
pub const COP_FLAG_AEAD_TLS_TYPE: u32 = 16;
pub const COP_FLAG_AEAD_SRTP_TYPE: u32 = 32;
pub const COP_FLAG_RESET: u32 = 64;
pub const CRYPTO_ALG_FLAG_SUPPORTED: u32 = 1;
pub const CRYPTO_ALG_FLAG_RNG_ENABLE: u32 = 2;
pub const CRYPTO_ALG_FLAG_DSA_SHA: u32 = 4;
pub const CRK_MAXPARAM: u32 = 8;
pub const CRIOGET_NOT_NEEDED: u32 = 1;
pub type __s8 = ::std::os::raw::c_schar;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __s16 = ::std::os::raw::c_short;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __s64 = ::std::os::raw::c_longlong;
pub type __u64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___kernel_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__kernel_fd_set>())).fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}
pub type __kernel_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_dev_t = ::std::os::raw::c_ulong;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::os::raw::c_uint;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
pub type __kernel_uid_t = ::std::os::raw::c_uint;
pub type __kernel_gid_t = ::std::os::raw::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___kernel_fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__kernel_fsid_t>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fsid_t),
            "::",
            stringify!(val)
        )
    );
}
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;
pub const cryptodev_crypto_op_t_CRYPTO_DES_CBC: cryptodev_crypto_op_t = 1;
pub const cryptodev_crypto_op_t_CRYPTO_3DES_CBC: cryptodev_crypto_op_t = 2;
pub const cryptodev_crypto_op_t_CRYPTO_BLF_CBC: cryptodev_crypto_op_t = 3;
pub const cryptodev_crypto_op_t_CRYPTO_CAST_CBC: cryptodev_crypto_op_t = 4;
pub const cryptodev_crypto_op_t_CRYPTO_SKIPJACK_CBC: cryptodev_crypto_op_t = 5;
pub const cryptodev_crypto_op_t_CRYPTO_MD5_HMAC: cryptodev_crypto_op_t = 6;
pub const cryptodev_crypto_op_t_CRYPTO_SHA1_HMAC: cryptodev_crypto_op_t = 7;
pub const cryptodev_crypto_op_t_CRYPTO_RIPEMD160_HMAC: cryptodev_crypto_op_t = 8;
pub const cryptodev_crypto_op_t_CRYPTO_MD5_KPDK: cryptodev_crypto_op_t = 9;
pub const cryptodev_crypto_op_t_CRYPTO_SHA1_KPDK: cryptodev_crypto_op_t = 10;
pub const cryptodev_crypto_op_t_CRYPTO_RIJNDAEL128_CBC: cryptodev_crypto_op_t = 11;
pub const cryptodev_crypto_op_t_CRYPTO_AES_CBC: cryptodev_crypto_op_t = 11;
pub const cryptodev_crypto_op_t_CRYPTO_ARC4: cryptodev_crypto_op_t = 12;
pub const cryptodev_crypto_op_t_CRYPTO_MD5: cryptodev_crypto_op_t = 13;
pub const cryptodev_crypto_op_t_CRYPTO_SHA1: cryptodev_crypto_op_t = 14;
pub const cryptodev_crypto_op_t_CRYPTO_DEFLATE_COMP: cryptodev_crypto_op_t = 15;
pub const cryptodev_crypto_op_t_CRYPTO_NULL: cryptodev_crypto_op_t = 16;
pub const cryptodev_crypto_op_t_CRYPTO_LZS_COMP: cryptodev_crypto_op_t = 17;
pub const cryptodev_crypto_op_t_CRYPTO_SHA2_256_HMAC: cryptodev_crypto_op_t = 18;
pub const cryptodev_crypto_op_t_CRYPTO_SHA2_384_HMAC: cryptodev_crypto_op_t = 19;
pub const cryptodev_crypto_op_t_CRYPTO_SHA2_512_HMAC: cryptodev_crypto_op_t = 20;
pub const cryptodev_crypto_op_t_CRYPTO_AES_CTR: cryptodev_crypto_op_t = 21;
pub const cryptodev_crypto_op_t_CRYPTO_AES_XTS: cryptodev_crypto_op_t = 22;
pub const cryptodev_crypto_op_t_CRYPTO_AES_ECB: cryptodev_crypto_op_t = 23;
pub const cryptodev_crypto_op_t_CRYPTO_AES_GCM: cryptodev_crypto_op_t = 50;
pub const cryptodev_crypto_op_t_CRYPTO_CAMELLIA_CBC: cryptodev_crypto_op_t = 101;
pub const cryptodev_crypto_op_t_CRYPTO_RIPEMD160: cryptodev_crypto_op_t = 102;
pub const cryptodev_crypto_op_t_CRYPTO_SHA2_224: cryptodev_crypto_op_t = 103;
pub const cryptodev_crypto_op_t_CRYPTO_SHA2_256: cryptodev_crypto_op_t = 104;
pub const cryptodev_crypto_op_t_CRYPTO_SHA2_384: cryptodev_crypto_op_t = 105;
pub const cryptodev_crypto_op_t_CRYPTO_SHA2_512: cryptodev_crypto_op_t = 106;
pub const cryptodev_crypto_op_t_CRYPTO_SHA2_224_HMAC: cryptodev_crypto_op_t = 107;
pub const cryptodev_crypto_op_t_CRYPTO_TLS11_AES_CBC_HMAC_SHA1: cryptodev_crypto_op_t = 108;
pub const cryptodev_crypto_op_t_CRYPTO_TLS12_AES_CBC_HMAC_SHA256: cryptodev_crypto_op_t = 109;
pub const cryptodev_crypto_op_t_CRYPTO_ALGORITHM_ALL: cryptodev_crypto_op_t = 110;
pub type cryptodev_crypto_op_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct session_op {
    pub cipher: __u32,
    pub mac: __u32,
    pub keylen: __u32,
    pub key: *mut __u8,
    pub mackeylen: __u32,
    pub mackey: *mut __u8,
    pub ses: __u32,
}
#[test]
fn bindgen_test_layout_session_op() {
    assert_eq!(
        ::std::mem::size_of::<session_op>(),
        48usize,
        concat!("Size of: ", stringify!(session_op))
    );
    assert_eq!(
        ::std::mem::align_of::<session_op>(),
        8usize,
        concat!("Alignment of ", stringify!(session_op))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<session_op>())).cipher as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(session_op),
            "::",
            stringify!(cipher)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<session_op>())).mac as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(session_op),
            "::",
            stringify!(mac)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<session_op>())).keylen as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(session_op),
            "::",
            stringify!(keylen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<session_op>())).key as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(session_op),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<session_op>())).mackeylen as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(session_op),
            "::",
            stringify!(mackeylen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<session_op>())).mackey as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(session_op),
            "::",
            stringify!(mackey)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<session_op>())).ses as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(session_op),
            "::",
            stringify!(ses)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct session_info_op {
    pub ses: __u32,
    pub cipher_info: session_info_op_alg_info,
    pub hash_info: session_info_op_alg_info,
    pub alignmask: __u16,
    pub flags: __u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct session_info_op_alg_info {
    pub cra_name: [::std::os::raw::c_char; 64usize],
    pub cra_driver_name: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout_session_info_op_alg_info() {
    assert_eq!(
        ::std::mem::size_of::<session_info_op_alg_info>(),
        128usize,
        concat!("Size of: ", stringify!(session_info_op_alg_info))
    );
    assert_eq!(
        ::std::mem::align_of::<session_info_op_alg_info>(),
        1usize,
        concat!("Alignment of ", stringify!(session_info_op_alg_info))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<session_info_op_alg_info>())).cra_name as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(session_info_op_alg_info),
            "::",
            stringify!(cra_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<session_info_op_alg_info>())).cra_driver_name as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(session_info_op_alg_info),
            "::",
            stringify!(cra_driver_name)
        )
    );
}
#[test]
fn bindgen_test_layout_session_info_op() {
    assert_eq!(
        ::std::mem::size_of::<session_info_op>(),
        268usize,
        concat!("Size of: ", stringify!(session_info_op))
    );
    assert_eq!(
        ::std::mem::align_of::<session_info_op>(),
        4usize,
        concat!("Alignment of ", stringify!(session_info_op))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<session_info_op>())).ses as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(session_info_op),
            "::",
            stringify!(ses)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<session_info_op>())).cipher_info as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(session_info_op),
            "::",
            stringify!(cipher_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<session_info_op>())).hash_info as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(session_info_op),
            "::",
            stringify!(hash_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<session_info_op>())).alignmask as *const _ as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(session_info_op),
            "::",
            stringify!(alignmask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<session_info_op>())).flags as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(session_info_op),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct crypt_op {
    pub ses: __u32,
    pub op: __u16,
    pub flags: __u16,
    pub len: __u32,
    pub src: *mut __u8,
    pub dst: *mut __u8,
    pub mac: *mut __u8,
    pub iv: *mut __u8,
}
#[test]
fn bindgen_test_layout_crypt_op() {
    assert_eq!(
        ::std::mem::size_of::<crypt_op>(),
        48usize,
        concat!("Size of: ", stringify!(crypt_op))
    );
    assert_eq!(
        ::std::mem::align_of::<crypt_op>(),
        8usize,
        concat!("Alignment of ", stringify!(crypt_op))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<crypt_op>())).ses as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(crypt_op),
            "::",
            stringify!(ses)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<crypt_op>())).op as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(crypt_op),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<crypt_op>())).flags as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(crypt_op),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<crypt_op>())).len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(crypt_op),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<crypt_op>())).src as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(crypt_op),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<crypt_op>())).dst as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(crypt_op),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<crypt_op>())).mac as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(crypt_op),
            "::",
            stringify!(mac)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<crypt_op>())).iv as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(crypt_op),
            "::",
            stringify!(iv)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct crypt_auth_op {
    pub ses: __u32,
    pub op: __u16,
    pub flags: __u16,
    pub len: __u32,
    pub auth_len: __u32,
    pub auth_src: *mut __u8,
    pub src: *mut __u8,
    pub dst: *mut __u8,
    pub tag: *mut __u8,
    pub tag_len: __u32,
    pub iv: *mut __u8,
    pub iv_len: __u32,
}
#[test]
fn bindgen_test_layout_crypt_auth_op() {
    assert_eq!(
        ::std::mem::size_of::<crypt_auth_op>(),
        72usize,
        concat!("Size of: ", stringify!(crypt_auth_op))
    );
    assert_eq!(
        ::std::mem::align_of::<crypt_auth_op>(),
        8usize,
        concat!("Alignment of ", stringify!(crypt_auth_op))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<crypt_auth_op>())).ses as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(crypt_auth_op),
            "::",
            stringify!(ses)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<crypt_auth_op>())).op as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(crypt_auth_op),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<crypt_auth_op>())).flags as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(crypt_auth_op),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<crypt_auth_op>())).len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(crypt_auth_op),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<crypt_auth_op>())).auth_len as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(crypt_auth_op),
            "::",
            stringify!(auth_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<crypt_auth_op>())).auth_src as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(crypt_auth_op),
            "::",
            stringify!(auth_src)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<crypt_auth_op>())).src as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(crypt_auth_op),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<crypt_auth_op>())).dst as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(crypt_auth_op),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<crypt_auth_op>())).tag as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(crypt_auth_op),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<crypt_auth_op>())).tag_len as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(crypt_auth_op),
            "::",
            stringify!(tag_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<crypt_auth_op>())).iv as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(crypt_auth_op),
            "::",
            stringify!(iv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<crypt_auth_op>())).iv_len as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(crypt_auth_op),
            "::",
            stringify!(iv_len)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct crparam {
    pub crp_p: *mut __u8,
    pub crp_nbits: __u32,
}
#[test]
fn bindgen_test_layout_crparam() {
    assert_eq!(
        ::std::mem::size_of::<crparam>(),
        16usize,
        concat!("Size of: ", stringify!(crparam))
    );
    assert_eq!(
        ::std::mem::align_of::<crparam>(),
        8usize,
        concat!("Alignment of ", stringify!(crparam))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<crparam>())).crp_p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(crparam),
            "::",
            stringify!(crp_p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<crparam>())).crp_nbits as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(crparam),
            "::",
            stringify!(crp_nbits)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct crypt_kop {
    pub crk_op: __u32,
    pub crk_status: __u32,
    pub crk_iparams: __u16,
    pub crk_oparams: __u16,
    pub crk_pad1: __u32,
    pub crk_param: [crparam; 8usize],
}
#[test]
fn bindgen_test_layout_crypt_kop() {
    assert_eq!(
        ::std::mem::size_of::<crypt_kop>(),
        144usize,
        concat!("Size of: ", stringify!(crypt_kop))
    );
    assert_eq!(
        ::std::mem::align_of::<crypt_kop>(),
        8usize,
        concat!("Alignment of ", stringify!(crypt_kop))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<crypt_kop>())).crk_op as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(crypt_kop),
            "::",
            stringify!(crk_op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<crypt_kop>())).crk_status as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(crypt_kop),
            "::",
            stringify!(crk_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<crypt_kop>())).crk_iparams as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(crypt_kop),
            "::",
            stringify!(crk_iparams)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<crypt_kop>())).crk_oparams as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(crypt_kop),
            "::",
            stringify!(crk_oparams)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<crypt_kop>())).crk_pad1 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(crypt_kop),
            "::",
            stringify!(crk_pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<crypt_kop>())).crk_param as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(crypt_kop),
            "::",
            stringify!(crk_param)
        )
    );
}
pub const cryptodev_crk_op_t_CRK_MOD_EXP: cryptodev_crk_op_t = 0;
pub const cryptodev_crk_op_t_CRK_MOD_EXP_CRT: cryptodev_crk_op_t = 1;
pub const cryptodev_crk_op_t_CRK_DSA_SIGN: cryptodev_crk_op_t = 2;
pub const cryptodev_crk_op_t_CRK_DSA_VERIFY: cryptodev_crk_op_t = 3;
pub const cryptodev_crk_op_t_CRK_DH_COMPUTE_KEY: cryptodev_crk_op_t = 4;
pub const cryptodev_crk_op_t_CRK_ALGORITHM_ALL: cryptodev_crk_op_t = 5;
pub type cryptodev_crk_op_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cphash_op {
    pub dst_ses: __u32,
    pub src_ses: __u32,
}
#[test]
fn bindgen_test_layout_cphash_op() {
    assert_eq!(
        ::std::mem::size_of::<cphash_op>(),
        8usize,
        concat!("Size of: ", stringify!(cphash_op))
    );
    assert_eq!(
        ::std::mem::align_of::<cphash_op>(),
        4usize,
        concat!("Alignment of ", stringify!(cphash_op))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cphash_op>())).dst_ses as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cphash_op),
            "::",
            stringify!(dst_ses)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cphash_op>())).src_ses as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cphash_op),
            "::",
            stringify!(src_ses)
        )
    );
}
